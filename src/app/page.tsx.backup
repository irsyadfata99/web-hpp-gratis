"use client";

import React, { useState } from "react";
import { ChevronLeft, ChevronRight, Plus, Trash2, Calculator, BarChart3, Share2 } from "lucide-react";

// Types
interface Material {
  id: string;
  name: string;
  price: number;
  quantityBought: number;
  quantityUsed: number;
  unit: "kg" | "liter" | "piece";
  portionUnit: "gram" | "ml" | "piece";
  totalCost: number;
}

interface FixedCost {
  rent: number;
  utilities: number;
  monthlyProduction: number;
  fixedCostPerPortion: number;
}

interface LaborCost {
  employeeCount: number;
  dailyWage: number;
  workingDaysPerMonth: number;
  laborCostPerPortion: number;
}

// Utility functions
const formatCurrency = (amount: number): string => {
  return new Intl.NumberFormat("id-ID", {
    style: "currency",
    currency: "IDR",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
};

// Unit conversion functions
const convertToBaseUnit = (value: number, fromUnit: string, toUnit: string): number => {
  if (fromUnit === toUnit) return value;

  // Convert to grams/ml from kg/liter
  if (fromUnit === "kg" && toUnit === "gram") return value * 1000;
  if (fromUnit === "liter" && toUnit === "ml") return value * 1000;

  // Convert from grams/ml to kg/liter
  if (fromUnit === "gram" && toUnit === "kg") return value / 1000;
  if (fromUnit === "ml" && toUnit === "liter") return value / 1000;

  return value; // piece to piece or no conversion needed
};

const getCompatiblePortionUnits = (mainUnit: string): string[] => {
  switch (mainUnit) {
    case "kg":
      return ["gram", "kg"];
    case "liter":
      return ["ml", "liter"];
    case "piece":
      return ["piece"];
    default:
      return ["piece"];
  }
};

const calculateVariableCost = (materials: Material[]): number => {
  return materials.reduce((total, material) => {
    // Convert portion unit to main unit for calculation
    const quantityUsedInMainUnit = convertToBaseUnit(material.quantityUsed, material.portionUnit, material.unit);

    const costPerUnit = material.price / material.quantityBought;
    return total + costPerUnit * quantityUsedInMainUnit;
  }, 0);
};

const calculateFixedCostPerPortion = (monthlyCosts: number, monthlyProduction: number): number => {
  return monthlyCosts / monthlyProduction;
};

const calculateLaborCostPerPortion = (employeeCount: number, dailyWage: number, workingDays: number, monthlyProduction: number): number => {
  const monthlyLaborCost = employeeCount * dailyWage * workingDays;
  return monthlyLaborCost / monthlyProduction;
};

const calculateHPP = (variableCost: number, fixedCost: number, laborCost: number): number => {
  return variableCost + fixedCost + laborCost;
};

// UI Components
const Button: React.FC<{
  children: React.ReactNode;
  onClick?: () => void;
  variant?: "primary" | "secondary" | "danger";
  size?: "sm" | "md" | "lg";
  disabled?: boolean;
  className?: string;
}> = ({ children, onClick, variant = "primary", size = "md", disabled = false, className = "" }) => {
  const baseClasses = "inline-flex items-center justify-center rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2";

  const variantClasses = {
    primary: "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 disabled:bg-blue-300",
    secondary: "bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500 disabled:bg-gray-100",
    danger: "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 disabled:bg-red-300",
  };

  const sizeClasses = {
    sm: "px-3 py-2 text-sm",
    md: "px-4 py-2 text-base",
    lg: "px-6 py-3 text-lg",
  };

  return (
    <button className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`} onClick={onClick} disabled={disabled}>
      {children}
    </button>
  );
};

const Input: React.FC<{
  label: string;
  type?: "text" | "number";
  value: string | number;
  onChange: (value: string) => void;
  placeholder?: string;
  unit?: string;
  error?: string;
  required?: boolean;
}> = ({ label, type = "text", value, onChange, placeholder, unit, error, required = false }) => {
  const handleInputChange = (inputValue: string) => {
    if (type !== "number") {
      onChange(inputValue);
      return;
    }

    // Handle empty input
    if (inputValue === "") {
      onChange("0");
      return;
    }

    // Simply replace comma with dot and validate
    const cleanValue = inputValue.replace(",", ".");

    // Basic validation: allow numbers with optional decimal point
    if (/^\d*\.?\d*$/.test(cleanValue) && cleanValue !== ".") {
      onChange(cleanValue);
    }
  };

  return (
    <div className="mb-4">
      <label className="block text-sm font-medium text-gray-700 mb-2">
        {label} {required && <span className="text-red-500">*</span>}
      </label>
      <div className="relative">
        <input
          type="text"
          value={value}
          onChange={(e) => handleInputChange(e.target.value)}
          placeholder={placeholder}
          className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${error ? "border-red-500" : "border-gray-300"} ${unit ? "pr-12" : ""}`}
        />
        {unit && (
          <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
            <span className="text-gray-500 text-sm">{unit}</span>
          </div>
        )}
      </div>
      {error && <p className="mt-1 text-sm text-red-600">{error}</p>}
      {type === "number" && <p className="mt-1 text-xs text-gray-500">Masukkan angka desimal: 0.3 atau 0,3</p>}
    </div>
  );
};

const Card: React.FC<{ children: React.ReactNode; className?: string }> = ({ children, className = "" }) => {
  return <div className={`bg-white rounded-lg shadow-md p-6 ${className}`}>{children}</div>;
};

const ProgressBar: React.FC<{ currentStep: number; totalSteps: number }> = ({ currentStep, totalSteps }) => {
  const progress = (currentStep / totalSteps) * 100;

  return (
    <div className="mb-8">
      <div className="flex justify-between text-sm text-gray-600 mb-2">
        <span>
          Langkah {currentStep} dari {totalSteps}
        </span>
        <span>{Math.round(progress)}%</span>
      </div>
      <div className="w-full bg-gray-200 rounded-full h-2">
        <div className="bg-blue-600 h-2 rounded-full transition-all duration-300" style={{ width: `${progress}%` }}></div>
      </div>
    </div>
  );
};

// Main Components
const VariableCostForm: React.FC<{
  materials: Material[];
  setMaterials: (materials: Material[]) => void;
  onNext: () => void;
}> = ({ materials, setMaterials, onNext }) => {
  const addMaterial = () => {
    const newMaterial: Material = {
      id: Date.now().toString(),
      name: "",
      price: 0,
      quantityBought: 0,
      quantityUsed: 0,
      unit: "kg",
      portionUnit: "gram",
      totalCost: 0,
    };
    setMaterials([...materials, newMaterial]);
  };

  const removeMaterial = (id: string) => {
    setMaterials(materials.filter((m) => m.id !== id));
  };

  const updateMaterial = (id: string, field: keyof Material, value: string | number) => {
    setMaterials(
      materials.map((m) => {
        if (m.id === id) {
          const updated = { ...m, [field]: value };

          // Auto-update portionUnit when main unit changes
          if (field === "unit") {
            const compatibleUnits = getCompatiblePortionUnits(value as string);
            updated.portionUnit = compatibleUnits[0] as Material["portionUnit"];
          }

          if (field === "price" || field === "quantityBought" || field === "quantityUsed" || field === "unit" || field === "portionUnit") {
            // More careful parsing of numbers
            const price = typeof updated.price === "string" ? parseFloat(updated.price) || 0 : updated.price;
            const quantityBought = typeof updated.quantityBought === "string" ? parseFloat(updated.quantityBought) || 0 : updated.quantityBought;
            const quantityUsed = typeof updated.quantityUsed === "string" ? parseFloat(updated.quantityUsed) || 0 : updated.quantityUsed;

            // Update the numeric values
            updated.price = price;
            updated.quantityBought = quantityBought;
            updated.quantityUsed = quantityUsed;

            // Calculate cost per portion with unit conversion
            if (quantityBought > 0) {
              const quantityUsedInMainUnit = convertToBaseUnit(quantityUsed, updated.portionUnit, updated.unit);
              const costPerUnit = price / quantityBought;
              updated.totalCost = costPerUnit * quantityUsedInMainUnit;
            } else {
              updated.totalCost = 0;
            }
          }
          return updated;
        }
        return m;
      })
    );
  };

  const totalVariableCost = calculateVariableCost(materials);
  const canProceed = materials.length > 0 && materials.every((m) => m.name && m.price > 0 && m.quantityBought > 0);

  return (
    <Card>
      <h2 className="text-xl font-semibold text-gray-900 mb-6">Biaya Variabel (Bahan Baku)</h2>

      {materials.map((material) => (
        <div key={material.id} className="border rounded-lg p-4 mb-4 bg-gray-50">
          <div className="flex justify-between items-center mb-3">
            <h3 className="font-medium text-gray-900">Bahan #{materials.indexOf(material) + 1}</h3>
            <Button variant="danger" size="sm" onClick={() => removeMaterial(material.id)}>
              <Trash2 className="w-4 h-4" />
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Input label="Nama Bahan" value={material.name} onChange={(value) => updateMaterial(material.id, "name", value)} placeholder="Contoh: Ayam Kampung" required />

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Satuan Pembelian <span className="text-red-500">*</span>
              </label>
              <select value={material.unit} onChange={(e) => updateMaterial(material.id, "unit", e.target.value)} className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="kg">Kilogram (kg)</option>
                <option value="liter">Liter (L)</option>
                <option value="piece">Buah/Pcs</option>
              </select>
            </div>

            <Input label="Harga Beli" type="number" value={material.price} onChange={(value) => updateMaterial(material.id, "price", value)} placeholder="0" unit="Rp" required />

            <Input label={`Jumlah Beli (${material.unit})`} type="number" value={material.quantityBought} onChange={(value) => updateMaterial(material.id, "quantityBought", value)} placeholder="0" unit={material.unit} required />

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Satuan per Porsi <span className="text-red-500">*</span>
              </label>
              <select
                value={material.portionUnit}
                onChange={(e) => updateMaterial(material.id, "portionUnit", e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {getCompatiblePortionUnits(material.unit).map((unit) => (
                  <option key={unit} value={unit}>
                    {unit === "gram" ? "Gram (g)" : unit === "ml" ? "Mililiter (ml)" : unit === "kg" ? "Kilogram (kg)" : unit === "liter" ? "Liter (L)" : "Buah/Pcs"}
                  </option>
                ))}
              </select>
            </div>

            <Input label={`Jumlah Pakai per Porsi`} type="number" value={material.quantityUsed} onChange={(value) => updateMaterial(material.id, "quantityUsed", value)} placeholder="0" unit={material.portionUnit} required />

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Biaya per Porsi</label>
              <div className="px-3 py-2 bg-blue-50 border border-blue-200 rounded-lg text-blue-800 font-medium">{formatCurrency(material.totalCost)}</div>
              {material.quantityUsed > 0 && material.portionUnit !== material.unit && (
                <p className="text-xs text-gray-500 mt-1">
                  {material.quantityUsed} {material.portionUnit} = {convertToBaseUnit(material.quantityUsed, material.portionUnit, material.unit)} {material.unit}
                </p>
              )}
            </div>
          </div>
        </div>
      ))}

      <Button variant="secondary" onClick={addMaterial} className="w-full mb-6">
        <Plus className="w-4 h-4 mr-2" />
        Tambah Bahan Baku
      </Button>

      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
        <div className="flex justify-between items-center">
          <span className="font-medium text-blue-900">Total Biaya Variabel per Porsi:</span>
          <span className="text-xl font-bold text-blue-900">{formatCurrency(totalVariableCost)}</span>
        </div>
      </div>

      <Button onClick={onNext} disabled={!canProceed} className="w-full" size="lg">
        Lanjut ke Biaya Tetap
        <ChevronRight className="w-5 h-5 ml-2" />
      </Button>
    </Card>
  );
};

const FixedCostForm: React.FC<{
  fixedCost: FixedCost;
  setFixedCost: (cost: FixedCost) => void;
  onNext: () => void;
  onBack: () => void;
}> = ({ fixedCost, setFixedCost, onNext, onBack }) => {
  const updateFixedCost = (field: keyof FixedCost, value: number) => {
    const updated = { ...fixedCost, [field]: value };
    if (field === "rent" || field === "utilities" || field === "monthlyProduction") {
      const monthlyCosts = updated.rent + updated.utilities;
      updated.fixedCostPerPortion = calculateFixedCostPerPortion(monthlyCosts, updated.monthlyProduction);
    }
    setFixedCost(updated);
  };

  const canProceed = fixedCost.monthlyProduction > 0;

  return (
    <Card>
      <h2 className="text-xl font-semibold text-gray-900 mb-6">Biaya Tetap Bulanan</h2>

      <div className="space-y-4 mb-6">
        <Input label="Sewa Tempat per Bulan" type="number" value={fixedCost.rent} onChange={(value) => updateFixedCost("rent", parseFloat(value) || 0)} placeholder="0" unit="Rp" />

        <Input label="Listrik, Air, Gas per Bulan" type="number" value={fixedCost.utilities} onChange={(value) => updateFixedCost("utilities", parseFloat(value) || 0)} placeholder="0" unit="Rp" />

        <Input label="Estimasi Produksi per Bulan" type="number" value={fixedCost.monthlyProduction} onChange={(value) => updateFixedCost("monthlyProduction", parseFloat(value) || 0)} placeholder="0" unit="porsi" required />
      </div>

      <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
        <div className="flex justify-between items-center">
          <span className="font-medium text-green-900">Biaya Tetap per Porsi:</span>
          <span className="text-xl font-bold text-green-900">{formatCurrency(fixedCost.fixedCostPerPortion)}</span>
        </div>
      </div>

      <div className="flex gap-3">
        <Button variant="secondary" onClick={onBack} className="flex-1" size="lg">
          <ChevronLeft className="w-5 h-5 mr-2" />
          Kembali
        </Button>

        <Button onClick={onNext} disabled={!canProceed} className="flex-1" size="lg">
          Lanjut ke Biaya Tenaga Kerja
          <ChevronRight className="w-5 h-5 ml-2" />
        </Button>
      </div>
    </Card>
  );
};

const LaborCostForm: React.FC<{
  laborCost: LaborCost;
  setLaborCost: (cost: LaborCost) => void;
  fixedCost: FixedCost;
  onNext: () => void;
  onBack: () => void;
}> = ({ laborCost, setLaborCost, fixedCost, onNext, onBack }) => {
  const updateLaborCost = (field: keyof LaborCost, value: number) => {
    const updated = { ...laborCost, [field]: value };
    updated.laborCostPerPortion = calculateLaborCostPerPortion(updated.employeeCount, updated.dailyWage, updated.workingDaysPerMonth, fixedCost.monthlyProduction);
    setLaborCost(updated);
  };

  const presetWages = [50000, 75000, 100000, 150000, 200000];

  return (
    <Card>
      <h2 className="text-xl font-semibold text-gray-900 mb-6">Biaya Tenaga Kerja</h2>

      <div className="space-y-4 mb-6">
        <Input label="Jumlah Karyawan" type="number" value={laborCost.employeeCount} onChange={(value) => updateLaborCost("employeeCount", parseFloat(value) || 0)} placeholder="0" unit="orang" />

        <div>
          <Input label="Upah Harian per Orang" type="number" value={laborCost.dailyWage} onChange={(value) => updateLaborCost("dailyWage", parseFloat(value) || 0)} placeholder="0" unit="Rp" />

          <div className="mt-2">
            <p className="text-sm text-gray-600 mb-2">Upah umum:</p>
            <div className="flex flex-wrap gap-2">
              {presetWages.map((wage) => (
                <button key={wage} onClick={() => updateLaborCost("dailyWage", wage)} className="px-3 py-1 text-sm bg-gray-200 hover:bg-gray-300 rounded-full transition-colors">
                  {formatCurrency(wage)}
                </button>
              ))}
            </div>
          </div>
        </div>

        <Input label="Hari Kerja per Bulan" type="number" value={laborCost.workingDaysPerMonth} onChange={(value) => updateLaborCost("workingDaysPerMonth", parseFloat(value) || 0)} placeholder="25" unit="hari" />
      </div>

      <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6">
        <div className="flex justify-between items-center">
          <span className="font-medium text-orange-900">Biaya Tenaga Kerja per Porsi:</span>
          <span className="text-xl font-bold text-orange-900">{formatCurrency(laborCost.laborCostPerPortion)}</span>
        </div>
      </div>

      <div className="flex gap-3">
        <Button variant="secondary" onClick={onBack} className="flex-1" size="lg">
          <ChevronLeft className="w-5 h-5 mr-2" />
          Kembali
        </Button>

        <Button onClick={onNext} className="flex-1" size="lg">
          Lihat Hasil HPP
          <ChevronRight className="w-5 h-5 ml-2" />
        </Button>
      </div>
    </Card>
  );
};

const HPPResult: React.FC<{
  materials: Material[];
  fixedCost: FixedCost;
  laborCost: LaborCost;
  onRestart: () => void;
  onBack: () => void;
  onAnalyzeRevenue: () => void;
}> = ({ materials, fixedCost, laborCost, onRestart, onBack, onAnalyzeRevenue }) => {
  const variableCostPerPortion = calculateVariableCost(materials);
  const totalHPP = calculateHPP(variableCostPerPortion, fixedCost.fixedCostPerPortion, laborCost.laborCostPerPortion);

  const breakdown = {
    variableCostPercentage: (variableCostPerPortion / totalHPP) * 100,
    fixedCostPercentage: (fixedCost.fixedCostPerPortion / totalHPP) * 100,
    laborCostPercentage: (laborCost.laborCostPerPortion / totalHPP) * 100,
  };

  const suggestedMargins = [20, 30, 40, 50];

  const shareToWhatsApp = () => {
    const message =
      `*HASIL PERHITUNGAN HPP*\n\n` +
      `💰 *HPP per Porsi: ${formatCurrency(totalHPP)}*\n\n` +
      `📊 *Rincian Biaya:*\n` +
      `• Biaya Variabel: ${formatCurrency(variableCostPerPortion)} (${breakdown.variableCostPercentage.toFixed(1)}%)\n` +
      `• Biaya Tetap: ${formatCurrency(fixedCost.fixedCostPerPortion)} (${breakdown.fixedCostPercentage.toFixed(1)}%)\n` +
      `• Biaya Tenaga Kerja: ${formatCurrency(laborCost.laborCostPerPortion)} (${breakdown.laborCostPercentage.toFixed(1)}%)\n\n` +
      `🎯 *Saran Harga Jual:*\n` +
      `• Margin 20%: ${formatCurrency(totalHPP * 1.2)}\n` +
      `• Margin 30%: ${formatCurrency(totalHPP * 1.3)}\n\n` +
      `Dihitung dengan Kalkulator HPP UMKM`;

    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;
    window.open(whatsappUrl, "_blank");
  };

  return (
    <Card>
      <h2 className="text-2xl font-bold text-gray-900 mb-6 text-center">Hasil Perhitungan HPP</h2>

      <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg p-6 mb-6 text-center">
        <h3 className="text-lg font-medium mb-2">Harga Pokok Produksi per Porsi</h3>
        <div className="text-4xl font-bold">{formatCurrency(totalHPP)}</div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 text-center">
          <div className="text-blue-600 font-medium text-sm mb-1">Biaya Variabel</div>
          <div className="text-xl font-bold text-blue-800">{formatCurrency(variableCostPerPortion)}</div>
          <div className="text-blue-600 text-sm">{breakdown.variableCostPercentage.toFixed(1)}%</div>
        </div>

        <div className="bg-green-50 border border-green-200 rounded-lg p-4 text-center">
          <div className="text-green-600 font-medium text-sm mb-1">Biaya Tetap</div>
          <div className="text-xl font-bold text-green-800">{formatCurrency(fixedCost.fixedCostPerPortion)}</div>
          <div className="text-green-600 text-sm">{breakdown.fixedCostPercentage.toFixed(1)}%</div>
        </div>

        <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 text-center">
          <div className="text-orange-600 font-medium text-sm mb-1">Biaya Tenaga Kerja</div>
          <div className="text-xl font-bold text-orange-800">{formatCurrency(laborCost.laborCostPerPortion)}</div>
          <div className="text-orange-600 text-sm">{breakdown.laborCostPercentage.toFixed(1)}%</div>
        </div>
      </div>

      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
        <h4 className="font-medium text-yellow-900 mb-3">💡 Saran Harga Jual per Porsi</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {suggestedMargins.map((margin) => {
            const sellingPrice = totalHPP * (1 + margin / 100);
            const profitPerPortion = sellingPrice - totalHPP;
            return (
              <div key={margin} className="bg-white rounded-lg p-3 border border-yellow-300">
                <div className="text-center">
                  <div className="text-sm text-yellow-800 mb-1">Margin Keuntungan {margin}%</div>
                  <div className="text-lg font-bold text-yellow-900 mb-1">{formatCurrency(sellingPrice)}</div>
                  <div className="text-xs text-yellow-700">Keuntungan: {formatCurrency(profitPerPortion)}/porsi</div>
                </div>
              </div>
            );
          })}
        </div>
        <div className="mt-3 text-xs text-yellow-800 text-center">* Harga sudah termasuk HPP + margin keuntungan per porsi</div>
      </div>

      <div className="flex flex-col sm:flex-row gap-3">
        <Button variant="secondary" onClick={onBack} className="flex-1" size="lg">
          <ChevronLeft className="w-5 h-5 mr-2" />
          Kembali
        </Button>

        <Button onClick={onAnalyzeRevenue} className="flex-1 bg-purple-600 hover:bg-purple-700" size="lg">
          <BarChart3 className="w-5 h-5 mr-2" />
          Analisis Pendapatan
        </Button>

        <Button onClick={shareToWhatsApp} className="flex-1 bg-green-600 hover:bg-green-700" size="lg">
          <Share2 className="w-5 h-5 mr-2" />
          Bagikan ke WhatsApp
        </Button>

        <Button onClick={onRestart} className="flex-1" size="lg">
          <Calculator className="w-5 h-5 mr-2" />
          Hitung Lagi
        </Button>
      </div>
    </Card>
  );
};

const RevenueBreakdown: React.FC<{
  hppData?: { totalHPP: number; variableCost: number; fixedCost: number; laborCost: number };
  onBack: () => void;
}> = ({ hppData, onBack }) => {
  const [totalRevenue, setTotalRevenue] = useState<number>(0);
  const [portionsSold, setPortionsSold] = useState<number>(0);

  const revenuePerPortion = portionsSold > 0 ? totalRevenue / portionsSold : 0;

  const variableCostTotal = hppData ? hppData.variableCost * portionsSold : 0;
  const fixedCostTotal = hppData ? hppData.fixedCost * portionsSold : 0;
  const laborCostTotal = hppData ? hppData.laborCost * portionsSold : 0;
  const totalCosts = variableCostTotal + fixedCostTotal + laborCostTotal;
  const totalProfit = totalRevenue - totalCosts;
  const profitMarginPercentage = totalRevenue > 0 ? (totalProfit / totalRevenue) * 100 : 0;

  const getProfitStatus = () => {
    if (profitMarginPercentage >= 30) return { color: "green", status: "Sangat Baik", bgColor: "bg-green-50", textColor: "text-green-600", borderColor: "border-green-200" };
    if (profitMarginPercentage >= 20) return { color: "blue", status: "Baik", bgColor: "bg-blue-50", textColor: "text-blue-600", borderColor: "border-blue-200" };
    if (profitMarginPercentage >= 10) return { color: "yellow", status: "Cukup", bgColor: "bg-yellow-50", textColor: "text-yellow-600", borderColor: "border-yellow-200" };
    if (profitMarginPercentage > 0) return { color: "orange", status: "Kurang", bgColor: "bg-orange-50", textColor: "text-orange-600", borderColor: "border-orange-200" };
    return { color: "red", status: "Rugi", bgColor: "bg-red-50", textColor: "text-red-600", borderColor: "border-red-200" };
  };

  const profitStatus = getProfitStatus();

  return (
    <Card>
      <h2 className="text-xl font-semibold text-gray-900 mb-6">Analisis Pendapatan Harian</h2>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <Input label="Total Pendapatan Hari Ini" type="number" value={totalRevenue} onChange={(value) => setTotalRevenue(parseFloat(value) || 0)} placeholder="0" unit="Rp" required />

        <Input label="Jumlah Porsi Terjual" type="number" value={portionsSold} onChange={(value) => setPortionsSold(parseFloat(value) || 0)} placeholder="0" unit="porsi" required />
      </div>

      {totalRevenue > 0 && portionsSold > 0 && (
        <>
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <div className="text-center">
              <div className="text-sm text-gray-600 mb-1">Harga Jual per Porsi</div>
              <div className="text-2xl font-bold text-gray-900">{formatCurrency(revenuePerPortion)}</div>
            </div>
          </div>

          {hppData && (
            <>
              {/* Breakdown Biaya Detail */}
              <div className="bg-white border rounded-lg p-4 mb-6">
                <h3 className="font-semibold text-gray-900 mb-4">💰 Breakdown Biaya Detail</h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center py-2 border-b">
                    <span className="font-medium">Pendapatan Total</span>
                    <span className="font-bold text-green-600">{formatCurrency(totalRevenue)}</span>
                  </div>

                  <div className="pl-4 space-y-2">
                    <div className="flex justify-between items-center py-1">
                      <span className="text-blue-600">Biaya Variabel ({portionsSold} porsi)</span>
                      <span className="font-medium text-blue-600">-{formatCurrency(variableCostTotal)}</span>
                    </div>

                    <div className="flex justify-between items-center py-1">
                      <span className="text-green-600">Biaya Tetap ({portionsSold} porsi)</span>
                      <span className="font-medium text-green-600">-{formatCurrency(fixedCostTotal)}</span>
                    </div>

                    <div className="flex justify-between items-center py-1">
                      <span className="text-orange-600">Biaya Tenaga Kerja ({portionsSold} porsi)</span>
                      <span className="font-medium text-orange-600">-{formatCurrency(laborCostTotal)}</span>
                    </div>

                    <div className="flex justify-between items-center py-2 border-t font-medium">
                      <span className="text-red-600">Total Biaya</span>
                      <span className="text-red-600">-{formatCurrency(totalCosts)}</span>
                    </div>
                  </div>

                  <div className="flex justify-between items-center py-3 border-t-2 border-gray-300 font-bold text-lg">
                    <span>Keuntungan Bersih</span>
                    <span className={profitStatus.textColor}>{formatCurrency(totalProfit)}</span>
                  </div>
                </div>
              </div>

              {/* Analisis Keuntungan */}
              <div className={`${profitStatus.bgColor} border ${profitStatus.borderColor} rounded-lg p-4 mb-6`}>
                <h3 className="font-semibold text-gray-900 mb-4">📊 Analisis Margin Keuntungan</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="text-center">
                    <div className={`${profitStatus.textColor} font-medium text-sm mb-1`}>Margin Keuntungan</div>
                    <div className={`text-3xl font-bold ${profitStatus.textColor}`}>{profitMarginPercentage.toFixed(1)}%</div>
                  </div>

                  <div className="text-center">
                    <div className={`${profitStatus.textColor} font-medium text-sm mb-1`}>Status Performa</div>
                    <div className={`text-xl font-bold ${profitStatus.textColor}`}>{profitStatus.status}</div>
                  </div>

                  <div className="text-center">
                    <div className={`${profitStatus.textColor} font-medium text-sm mb-1`}>Keuntungan per Porsi</div>
                    <div className={`text-lg font-bold ${profitStatus.textColor}`}>{formatCurrency(portionsSold > 0 ? totalProfit / portionsSold : 0)}</div>
                  </div>
                </div>

                {profitMarginPercentage < 20 && (
                  <div className="mt-4 p-3 bg-yellow-100 border border-yellow-300 rounded-lg">
                    <p className="text-yellow-800 text-sm">
                      💡 <strong>Saran:</strong> Margin keuntungan di bawah 20%. Pertimbangkan untuk {profitMarginPercentage < 10 ? "menaikkan harga jual atau mengurangi biaya produksi" : "mengoptimalkan efisiensi operasional"}.
                    </p>
                  </div>
                )}

                {profitMarginPercentage >= 30 && (
                  <div className="mt-4 p-3 bg-green-100 border border-green-300 rounded-lg">
                    <p className="text-green-800 text-sm">
                      🎉 <strong>Excellent!</strong> Margin keuntungan sangat baik. Bisnis Anda berjalan dengan efisien.
                    </p>
                  </div>
                )}
              </div>
            </>
          )}
        </>
      )}

      <Button variant="secondary" onClick={onBack} className="w-full" size="lg">
        <ChevronLeft className="w-5 h-5 mr-2" />
        Kembali ke Menu Utama
      </Button>
    </Card>
  );
};

const SupportCard: React.FC = () => {
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    alert("Nomor rekening berhasil disalin!");
  };

  return (
    <Card className="bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200">
      <div className="text-center">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Dukung Pengembangan Aplikasi</h3>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Donation Section */}
          <div className="bg-white rounded-lg p-4 border border-blue-200">
            <h4 className="font-medium text-blue-900 mb-3">Donasi Pengembangan</h4>
            <p className="text-sm text-gray-600 mb-3">Bantu kami mengembangkan fitur yang lebih baik untuk UMKM Indonesia</p>
            <div className="bg-blue-50 rounded-lg p-3 mb-3">
              <div className="text-xs text-blue-600 mb-1">Bank Seabank</div>
              <div className="font-mono text-sm font-semibold text-blue-900">901565290937</div>
              <div className="text-xs text-blue-600">a.n. Irsyad Fata Al Aidi</div>
            </div>
            <Button variant="secondary" size="sm" onClick={() => copyToClipboard("901565290937")} className="w-full">
              Salin Nomor Rekening
            </Button>
          </div>

          {/* Feedback Section */}
          <div className="bg-white rounded-lg p-4 border border-purple-200">
            <h4 className="font-medium text-purple-900 mb-3">Feedback & Saran</h4>
            <p className="text-sm text-gray-600 mb-3">Punya saran atau menemukan bug? Beritahu kami untuk perbaikan aplikasi</p>
            <Button variant="secondary" size="sm" onClick={() => window.open("mailto:irsyadfata99@gmail.com", "_blank")} className="w-full mb-2">
              Kirim Feedback via Email
            </Button>
            <Button variant="secondary" size="sm" onClick={() => window.open("https://forms.gle/QTHUTZ1Fbttauoqc7", "_blank")} className="w-full">
              Isi Form Feedback
            </Button>
          </div>
        </div>

        <p className="text-xs text-gray-500 mt-4">Aplikasi ini dibuat dengan ❤️ untuk membantu UMKM Indonesia berkembang</p>
      </div>
    </Card>
  );
};

// Main App Component
export default function HPPCalculatorApp() {
  const [currentPage, setCurrentPage] = useState<"home" | "hpp" | "revenue">("home");
  const [currentStep, setCurrentStep] = useState<number>(1);

  // HPP Calculator State
  const [materials, setMaterials] = useState<Material[]>([]);
  const [fixedCost, setFixedCost] = useState<FixedCost>({
    rent: 0,
    utilities: 0,
    monthlyProduction: 0,
    fixedCostPerPortion: 0,
  });
  const [laborCost, setLaborCost] = useState<LaborCost>({
    employeeCount: 0,
    dailyWage: 0,
    workingDaysPerMonth: 25,
    laborCostPerPortion: 0,
  });

  const resetCalculator = () => {
    setCurrentStep(1);
    setMaterials([]);
    setFixedCost({
      rent: 0,
      utilities: 0,
      monthlyProduction: 0,
      fixedCostPerPortion: 0,
    });
    setLaborCost({
      employeeCount: 0,
      dailyWage: 0,
      workingDaysPerMonth: 25,
      laborCostPerPortion: 0,
    });
  };

  const goToRevenueAnalysis = () => {
    setCurrentPage("revenue");
  };

  const goHome = () => {
    setCurrentPage("home");
    resetCalculator();
  };

  const hppData =
    currentStep === 4
      ? {
          totalHPP: calculateHPP(calculateVariableCost(materials), fixedCost.fixedCostPerPortion, laborCost.laborCostPerPortion),
          variableCost: calculateVariableCost(materials),
          fixedCost: fixedCost.fixedCostPerPortion,
          laborCost: laborCost.laborCostPerPortion,
        }
      : undefined;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Kalkulator HPP</h1>
              <p className="text-sm text-gray-600">Hitung Harga Pokok Produksi untuk UMKM</p>
            </div>
            {currentPage !== "home" && (
              <Button variant="secondary" onClick={goHome} size="sm">
                Menu Utama
              </Button>
            )}
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto px-4 py-8">
        {currentPage === "home" && (
          <div className="text-center">
            <Card className="mb-8">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">Pilih Fitur yang Ingin Digunakan</h2>
              <p className="text-gray-600 mb-6">Hitung HPP produk Anda atau analisis pendapatan harian dengan mudah</p>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div onClick={() => setCurrentPage("hpp")} className="cursor-pointer p-6 border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all">
                  <Calculator className="w-12 h-12 text-blue-600 mx-auto mb-3" />
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Kalkulator HPP</h3>
                  <p className="text-gray-600 text-sm">Hitung harga pokok produksi dengan rincian biaya variabel, tetap, dan tenaga kerja</p>
                </div>

                <div onClick={() => setCurrentPage("revenue")} className="cursor-pointer p-6 border-2 border-gray-200 rounded-lg hover:border-green-500 hover:bg-green-50 transition-all">
                  <BarChart3 className="w-12 h-12 text-green-600 mx-auto mb-3" />
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Analisis Pendapatan</h3>
                  <p className="text-gray-600 text-sm">Analisis keuntungan dan breakdown biaya dari pendapatan harian Anda</p>
                </div>
              </div>
            </Card>

            <div className="text-sm text-gray-500">
              <p>Gratis • Data Aman • Mobile Friendly</p>
            </div>
          </div>
        )}

        {currentPage === "hpp" && (
          <>
            <ProgressBar currentStep={currentStep} totalSteps={4} />

            {currentStep === 1 && <VariableCostForm materials={materials} setMaterials={setMaterials} onNext={() => setCurrentStep(2)} />}

            {currentStep === 2 && <FixedCostForm fixedCost={fixedCost} setFixedCost={setFixedCost} onNext={() => setCurrentStep(3)} onBack={() => setCurrentStep(1)} />}

            {currentStep === 3 && <LaborCostForm laborCost={laborCost} setLaborCost={setLaborCost} fixedCost={fixedCost} onNext={() => setCurrentStep(4)} onBack={() => setCurrentStep(2)} />}

            {currentStep === 4 && <HPPResult materials={materials} fixedCost={fixedCost} laborCost={laborCost} onRestart={resetCalculator} onBack={() => setCurrentStep(3)} onAnalyzeRevenue={goToRevenueAnalysis} />}
          </>
        )}

        {currentPage === "revenue" && <RevenueBreakdown hppData={hppData} onBack={goHome} />}
      </main>

      {/* Support Card */}
      <div className="max-w-4xl mx-auto px-4 mb-8">
        <SupportCard />
      </div>

      {/* Footer */}
      <footer className="bg-white border-t mt-12">
        <div className="max-w-4xl mx-auto px-4 py-6 text-center text-sm text-gray-600">
          <p>© 2025 Kalkulator HPP UMKM. Membantu UMKM Indonesia menghitung harga dengan tepat.</p>
        </div>
      </footer>
    </div>
  );
}
